# ================================================================
# BLED112-safe BGScript demo project with multiple DFU reboot methods
# Imitates a heart-rate sensor as well. Fun!
# Jeff Rowberg <jeff.rowberg@bluegiga.com>
# ----------------------------------------------------------------
#
# CHANGELOG:
#   2012-12-06 - Initial release
#
# ================================================================

dim connected   # connection status flag (not used much in this demo but whatever)

dim result      # USB CDC RX data operation return code
dim data_size   # USB CDC RX data size
dim data        # USB CDC RX data value
dim custom_adv_data(30) #advertising data for iBeacon
dim custom_sr_data (14) #device name

event system_boot(major, minor, patch, build, ll_version, protocol_version,hw)

    # enable watermark event on UART endpoint (REQUIRED for USB CDC-based DFU trigger)
    call system_endpoint_set_watermarks(3, 1, 0)
   
    # set advertisement interval to 20-30ms, and use all advertisement channels
    # (note min/max parameters are in units of 625 uSec)
    call gap_set_adv_parameters(1600, 1600, 3)

    # put module into general discoverable/undirected connectable mode
    call gap_set_mode(gap_user_data, gap_undirected_connectable)
	
	custom_adv_data( 0:1) = $02
	custom_adv_data( 1:1) = $01
	custom_adv_data( 2:1) = $06


	# Manufacturer data
	custom_adv_data( 3:1) = $1a
	custom_adv_data( 4:1) = $ff


	# Preamble - Apple Company Identifier - data type, 0x02 - data length, 0x15 = 21

	custom_adv_data( 5:1) = $4c
	custom_adv_data( 6:1) = $00
	custom_adv_data( 7:1) = $02

	custom_adv_data( 8:1) = $15

	# Custom UUID
	# E2 C5 6D B5-DF FB-48 D2-B0 60-D0 F5 A7 10 96 E0 

	# One of the UUIDs used in the AirLocate Sample of Apple.
	#

	# The UUID (16 bytes long)
	custom_adv_data( 9:1) = $E2 # 0
	custom_adv_data(10:1) = $C5 # 1

	custom_adv_data(11:1) = $6D # 2
	custom_adv_data(12:1) = $B5 # 3
	custom_adv_data(13:1) = $DF # 4

	custom_adv_data(14:1) = $FB # 5
	custom_adv_data(15:1) = $48 # 6
	custom_adv_data(16:1) = $D2 # 7

	custom_adv_data(17:1) = $B0 # 8
	custom_adv_data(18:1) = $60 # 9
	custom_adv_data(19:1) = $D0 # 10

	custom_adv_data(20:1) = $F5 # 11
	custom_adv_data(21:1) = $A7 # 12
	custom_adv_data(22:1) = $10 # 13

	custom_adv_data(23:1) = $96 # 14
	custom_adv_data(24:1) = $E0 # 16
	# ---


	# Major
	custom_adv_data(25:1) = $00
	custom_adv_data(26:1) = $01


	# Minor
	custom_adv_data(27:1) = $00

	custom_adv_data(28:1) = $03

	# Measured power at 1 meter (specified in 2's complement, so 0xC6 is -58)

	custom_adv_data(29:1) = $c6

	# Set advertisement data

	call gap_set_adv_data(0, 30, custom_adv_data(0:30))

	# Local Name 

	custom_sr_data( 0:1) = $0E # Length of this Data
	custom_sr_data( 1:1) = $09 # AD Type = Complete Local Name

	custom_sr_data( 2:1) = $69 # i
	custom_sr_data( 3:1) = $42 # B
	custom_sr_data( 4:1) = $65 # e

	custom_sr_data( 5:1) = $61 # a
	custom_sr_data( 6:1) = $63 # c
	custom_sr_data( 7:1) = $6F # o

	custom_sr_data( 8:1) = $6E # n			
	custom_sr_data( 9:1) = $44 # D			
	custom_sr_data(10:1) = $6F # o
    custom_sr_data(11:1) = $6E # n
    custom_sr_data(12:1) = $67 # g
	custom_sr_data(13:1) = $6C # l
	custom_sr_data(14:1) = $65 # e	

	# Set Scan Record data

	call gap_set_adv_data(1, 15, custom_sr_data(0:15))

end

# catch connection event
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
    # make sure this is a "new connection established" event
    if flags & $05 then
        # set connection status to CONNECTED
        connected = 1
    end if
end

# catch disconnection event
event connection_disconnected(handle, result)
    # set connection status to DISCONNECTED
    connected = 0
    
    # set advertisement interval to 20-30ms, and use all advertisement channels
    # (note min/max parameters are in units of 625 uSec)
    call gap_set_adv_parameters(32, 48, 7)

    # put module into back into general discoverable/undirected connectable mode
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
end

# watch for new data from USB CDC
# NOTE! This function or something similar MUST remain in the BGScript to
# allow access to DFU mode over USB CDC with a special trigger character
event system_endpoint_watermark_rx(endpoint, data_len)
    call system_endpoint_rx(endpoint, data_len)(result, data_size, data)
    if data = $30 then # ASCII '0' is 0x30
        # reboot into DFU mode when 0x30 is received
        call system_reset(1)
    end if
end

# catch remote write of characteristic value
# NOTE! This function or something similar MUST remain in the BGScript to
# allow access to DFU mode by triggering from a characteristic value update
event attributes_value(connection, reason, handle, offset, value_len, value_data)
    if handle = c_dfu_reboot_trigger then
        # remote client requested DFU reboot
        # NOTE: this will reset on ANY written value. You can check for a specific
        # byte or set of bytes in the "value_data" argument if desired.
        call system_reset(1)
    end if
end
